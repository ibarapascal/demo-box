{"version":3,"sources":["components/Content.view.tsx","pages/SampleDemo/index.tsx"],"names":["useStyles","makeStyles","theme","contentRoot","width","padding","overflowY","background","markdownPre","border","borderLeft","Content","children","classes","src","tag","document","createElement","async","getElementsByTagName","appendChild","loadScript","className","MarkdownContent","path","options","overrides","pre","component","props","code","JsxContent","variant","onClick","alert","color","href"],"mappings":"4GAAA,iGAKMA,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACrCC,YAAa,CACXC,MAAO,OACPC,QAAS,GACTC,UAAW,SACX,uBAAwB,CAEtBF,MAAO,GAET,6BAA8B,CAC5BG,WAAY,WAEd,6BAA8B,CAC5BA,WAAY,qDAGhBC,YAAa,CACXC,OAAQ,oBACRC,WAAY,yBAQHC,EAAU,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,SAClBC,EAAUb,IAkBhB,OAZmB,SAACc,GAClB,IAAMC,EAAMC,SAASC,cAAc,UACnCF,EAAIG,OAAQ,EACZH,EAAID,IAAMA,EACVE,SAASG,qBAAqB,QAAQ,GAAGC,YAAYL,GAEvDM,CACE,kFAMA,uBAAKC,UAAS,UAAKT,EAAQV,YAAb,mBAA2CS,IAQhDW,EAAkB,SAAC,GAAoC,IAAlCC,EAAiC,EAAjCA,KAC1BX,EAAUb,IAChB,OACE,gBAAC,IAAD,CACEyB,QAAS,CACPC,UAAW,CACTC,IAAK,CACHC,UAAW,GACXC,MAAO,CACLP,UAAU,GAAD,OAAKT,EAAQL,eAG1BsB,KAAM,CACJF,UAAW,GACXC,MAAO,CACLP,UAAU,mBAMjBE,K,gCC/EP,oCAwBMO,EAAa,WACjB,OACE,gCACE,2CACA,gBAAC,IAAD,CAAQC,QAAQ,YAAYC,QAAS,kBAAMC,MAAM,aAAjD,WAGA,gBAAC,IAAD,CAAQF,QAAQ,YAAYG,MAAM,UAAUC,KAAK,sBAAjD,UAOS,mBAACP,GACd,OACE,gBAAC,IAAYA,EACX,gBAAC,IAAD,CAAiBL,KAhCf,qMAiCF,2BACA,gBAACO,EAAD,MACA,2BACA,gBAAC,IAAD,CAAiBP,KAAI","file":"static/js/4.c94604d6.chunk.js","sourcesContent":["import Markdown from 'markdown-to-jsx';\r\nimport * as React from 'react';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  contentRoot: {\r\n    width: '100%',\r\n    padding: 20,\r\n    overflowY: 'scroll',\r\n    '&::-webkit-scrollbar': {\r\n      // set to 0 to hide scroll bar while still being able to scroll\r\n      width: 3,\r\n    },\r\n    '&::-webkit-scrollbar-track': {\r\n      background: '#FF8E53',\r\n    },\r\n    '&::-webkit-scrollbar-thumb': {\r\n      background: 'linear-gradient(45deg, #F50057 10%, #FF8E53 90%)',\r\n    },\r\n  },\r\n  markdownPre: {\r\n    border: '1px solid #DDDDDD',\r\n    borderLeft: '2px solid #FF8E53',\r\n  },\r\n}));\r\n\r\ninterface ContentProps {\r\n  children: React.ReactNode;\r\n}\r\n\r\nexport const Content = ({ children }: ContentProps) => {\r\n  const classes = useStyles();\r\n  /**\r\n   * Declaratively loading javascript\r\n   * Used because the script in `index.html` won't re-run after react-router-dom changed\r\n   * @param src\r\n   */\r\n  const loadScript = (src: string) => {\r\n    const tag = document.createElement('script');\r\n    tag.async = false;\r\n    tag.src = src;\r\n    document.getElementsByTagName('body')[0].appendChild(tag);\r\n  };\r\n  loadScript(\r\n    'https://cdn.jsdelivr.net/gh/google/code-prettify@master/loader/run_prettify.js',\r\n  );\r\n\r\n  process.env.NODE_ENV === 'development' && console.log('dev:content');\r\n\r\n  return (\r\n    <div className={`${classes.contentRoot} markdown-body`}>{children}</div>\r\n  );\r\n};\r\n\r\ninterface MarkdownContentProps {\r\n  path: string;\r\n}\r\n\r\nexport const MarkdownContent = ({ path }: MarkdownContentProps) => {\r\n  const classes = useStyles();\r\n  return (\r\n    <Markdown\r\n      options={{\r\n        overrides: {\r\n          pre: {\r\n            component: '',\r\n            props: {\r\n              className: `${classes.markdownPre}`,\r\n            },\r\n          },\r\n          code: {\r\n            component: '',\r\n            props: {\r\n              className: `prettyprint`,\r\n            },\r\n          },\r\n        },\r\n      }}\r\n    >\r\n      {path}\r\n    </Markdown>\r\n  );\r\n};\r\n","import raw from 'raw.macro';\r\nimport * as React from 'react';\r\n\r\nimport { Button } from '@material-ui/core';\r\n\r\nimport {\r\n  Content,\r\n  MarkdownContent\r\n} from '../../components/Content.view';\r\n\r\nconst md = `\r\n# In-line Markdown\r\n## In-line Markdown\r\n### In-line Markdown\r\n#### In-line Markdown\r\n##### In-line Markdown\r\n###### In-line Markdown\r\n\r\n>Some reference\r\n\r\n\\`\\`\\`\r\nconst data = 'sample';\r\n\\`\\`\\`\r\n`;\r\n\r\nconst JsxContent = () => {\r\n  return (\r\n    <>\r\n      <h1>JSX Component</h1>\r\n      <Button variant='contained' onClick={() => alert('clicked')}>\r\n        Default\r\n      </Button>\r\n      <Button variant='contained' color='primary' href='#contained-buttons'>\r\n        Link\r\n      </Button>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default (props: any) => {\r\n  return (\r\n    <Content {...props}>\r\n      <MarkdownContent path={md} />\r\n      <hr />\r\n      <JsxContent />\r\n      <hr />\r\n      <MarkdownContent path={raw('./README.md')} />\r\n    </Content>\r\n  );\r\n};\r\n"],"sourceRoot":""}