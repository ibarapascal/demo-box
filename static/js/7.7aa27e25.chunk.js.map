{"version":3,"sources":["pages/CardChessPassOthello/index.tsx"],"names":["props","Othello","row","Array","fill","metrix","map","x","React","data","setData","runner","setRunner","undefined","isOver","setIsOver","history","setHistory","changePairList","ri","ci","op","result","r","c","includes","push","flat","flatData","every","blackAmount","filter","length","whiteAmount","flatNullPosition","idx","Math","floor","value","onClick","pair","historyItem","forEach","newValue","onClickReverse","last","pop","className","style","display","ChessMan","border","justifySelf","rowIdx","key","y","columnIdx","float","outline","width","height","borderRadius","backgroundColor","alignSelf"],"mappings":"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","file":"static/js/7.7aa27e25.chunk.js","sourcesContent":["// import raw from 'raw.macro';\r\nimport * as React from 'react';\r\n\r\nimport {\r\n  Content,\r\n  // MarkdownContent\r\n} from '../../components/Content.view';\r\n\r\nexport default (props: any) => {\r\n  return (\r\n    <Content {...props}>\r\n      {/* <MarkdownContent path={raw('./README.md')} /> */}\r\n      <Othello />\r\n    </Content>\r\n  );\r\n};\r\n\r\nconst Othello = () => {\r\n  const len = 8;\r\n  const row = [...Array(len).fill(null)];\r\n  const metrix = row.map(x => [...row]);\r\n  // const metrix = [...Array(len).fill([...Array(len).fill(null)])];\r\n  metrix[3][3] = 0;\r\n  metrix[4][4] = 0;\r\n  metrix[3][4] = 1;\r\n  metrix[4][3] = 1;\r\n  const [data, setData] = React.useState<Array<Array<0 | 1 | null>>>(metrix);\r\n  const [runner, setRunner] = React.useState<0 | 1>(1);\r\n  const [isOver, setIsOver] = React.useState<0 | 1 | null | undefined>(\r\n    undefined,\r\n  );\r\n  const [history, setHistory] = React.useState<\r\n    Array<Array<{ ri: number; ci: number; value: 0 | 1 | null }>>\r\n  >([]);\r\n\r\n  /**\r\n   * Check reverses for each input\r\n   */\r\n  const changePairList = ({\r\n    ri,\r\n    ci,\r\n    runner,\r\n  }: {\r\n    ri: number;\r\n    ci: number;\r\n    runner: 0 | 1;\r\n  }) => {\r\n    const operation = [\r\n      [0, 1],\r\n      [1, 1],\r\n      [1, 0],\r\n      [1, -1],\r\n      [0, -1],\r\n      [-1, -1],\r\n      [-1, 0],\r\n      [-1, 1],\r\n    ];\r\n    const operatedList = operation.map(op => {\r\n      let result = [];\r\n      let r = ri + op[0];\r\n      let c = ci + op[1];\r\n      while (data[r] && ![null, undefined, runner].includes(data[r][c])) {\r\n        result.push({\r\n          ri: r,\r\n          ci: c,\r\n        });\r\n        r += op[0];\r\n        c += op[1];\r\n      }\r\n      return data[r] && data[r][c] === runner ? result : [];\r\n    });\r\n    return operatedList.flat();\r\n  };\r\n\r\n  /**\r\n   * Check game status by steps done\r\n   */\r\n  const flatData = data.flat().flat();\r\n  if (isOver === undefined && flatData.every(x => x !== null)) {\r\n    const blackAmount = flatData.filter(x => x === 1).length;\r\n    const whiteAmount = flatData.filter(x => x === 0).length;\r\n    setIsOver(\r\n      blackAmount > whiteAmount ? 1 : blackAmount < whiteAmount ? 0 : null,\r\n    );\r\n  }\r\n  /**\r\n   * Check game status by avaliable inputs\r\n   */\r\n  const flatNullPosition = flatData\r\n    .map((x, idx) => ({ ri: Math.floor(idx / len), ci: idx % len, value: x }))\r\n    .filter(x => x.value === null);\r\n  if (\r\n    isOver === undefined &&\r\n    flatNullPosition.length > 0 &&\r\n    flatNullPosition.every(x => {\r\n      return (\r\n        changePairList({\r\n          ri: x.ri,\r\n          ci: x.ci,\r\n          runner: runner,\r\n        }).length === 0\r\n      );\r\n    })\r\n  ) {\r\n    setIsOver(runner === 1 ? 0 : 1);\r\n  }\r\n\r\n  /**\r\n   * One step play\r\n   */\r\n  const onClick = ({ ri, ci }: { ri: number; ci: number }) => () => {\r\n    const pair = changePairList({ ri: ri, ci: ci, runner: runner });\r\n    if (data[ri][ci] === null && pair.length > 0) {\r\n      let historyItem = [\r\n        {\r\n          ri: ri,\r\n          ci: ci,\r\n          value: data[ri][ci],\r\n        },\r\n      ];\r\n      data[ri][ci] = runner;\r\n      pair.forEach(x => {\r\n        const newValue = data[x.ri][x.ci] === 1 ? 0 : 1;\r\n        historyItem.push({\r\n          ri: x.ri,\r\n          ci: x.ci,\r\n          value: data[x.ri][x.ci],\r\n        });\r\n        data[x.ri][x.ci] = newValue;\r\n      });\r\n      setRunner(runner === 1 ? 0 : 1);\r\n      setData(data);\r\n      setHistory([...history, historyItem]);\r\n    }\r\n  };\r\n  /**\r\n   * Reverse one step\r\n   */\r\n  const onClickReverse = () => {\r\n    const last = history.pop();\r\n    if (last) {\r\n      last.forEach(x => {\r\n        data[x.ri][x.ci] = x.value;\r\n      });\r\n      setRunner(runner === 1 ? 0 : 1);\r\n      setData(data);\r\n      setHistory(history);\r\n      if (isOver !== undefined) {\r\n        setIsOver(undefined);\r\n      }\r\n    }\r\n  };\r\n  /**\r\n   * Return to init status\r\n   */\r\n  const onClickRestart = () => {\r\n    setRunner(1);\r\n    setData(metrix);\r\n    setHistory([]);\r\n    setIsOver(undefined);\r\n  };\r\n\r\n  return (\r\n    <div className='App' style={{ display: 'grid' }}>\r\n      <h1 onClick={onClickRestart}>Card Chess Pass - Othello</h1>\r\n      <div style={{ display: 'grid' }}>\r\n        <ChessMan runner={runner} />\r\n        {isOver === undefined ? (\r\n          <h2 onClick={onClickReverse}>\r\n            Current runner: {runner === 1 ? 'black' : 'white'}\r\n          </h2>\r\n        ) : (\r\n          <h2 onClick={onClickReverse}>\r\n            {`Winner: ${\r\n              isOver === null ? 'both' : isOver === 1 ? 'black' : 'white'\r\n            }`}\r\n          </h2>\r\n        )}\r\n      </div>\r\n      <div\r\n        style={{\r\n          border: '1px solid black',\r\n          display: 'inline-block',\r\n          justifySelf: 'center',\r\n        }}\r\n      >\r\n        {data.map((x, rowIdx) => (\r\n          <div key={rowIdx} style={{ display: 'flex' }}>\r\n            {x.map((y, columnIdx) => (\r\n              <div\r\n                key={columnIdx}\r\n                style={{\r\n                  float: 'left',\r\n                  outline: '1px solid black',\r\n                  width: '6vw',\r\n                  height: '6vw',\r\n                  display: 'grid',\r\n                }}\r\n                onClick={onClick({ ri: rowIdx, ci: columnIdx })}\r\n              >\r\n                {y !== null && <ChessMan runner={y} />}\r\n              </div>\r\n            ))}\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst ChessMan = ({ runner }: { runner: 0 | 1 }) => (\r\n  <div\r\n    style={{\r\n      border: '1px solid black',\r\n      borderRadius: '2.5vw',\r\n      height: '5vw',\r\n      width: '5vw',\r\n      backgroundColor: `${runner === 1 ? '#333333' : 'white'}`,\r\n      justifySelf: 'center',\r\n      alignSelf: 'center',\r\n    }}\r\n  />\r\n);\r\n"],"sourceRoot":""}