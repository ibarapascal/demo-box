{"version":3,"sources":["pages/CardChessPassGobang/index.tsx"],"names":["props","Gobang","row","Array","fill","metrix","map","x","React","data","setData","runner","setRunner","history","setHistory","onClick","ri","ci","className","style","display","ChessMan","last","pop","border","justifySelf","rowIdx","key","y","columnIdx","float","outline","width","height","borderRadius","backgroundColor","alignSelf"],"mappings":"uJAQe,mBAACA,GACd,OACE,gBAAC,IAAYA,EAEX,gBAACC,EAAD,QAKN,IAAMA,EAAS,WACb,IACMC,EAAG,YAAOC,MADJ,IACeC,KAAK,OAC1BC,EAASH,EAAII,KAAI,SAAAC,GAAC,mBAAQL,MAHb,EAIKM,WAA2CH,GAJhD,mBAIZI,EAJY,KAINC,EAJM,OAKSF,WAAsB,GAL/B,mBAKZG,EALY,KAKJC,EALI,OAMWJ,WAE5B,IARiB,mBAMZK,EANY,KAMHC,EANG,KAabC,EAAU,SAAC,GAAD,IAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,GAAP,OAA4C,WACrC,OAAjBR,EAAKO,GAAIC,KACXR,EAAKO,GAAIC,GAAMN,EACfC,EAAqB,IAAXD,EAAe,EAAI,GAC7BD,EAAQD,GACRK,EAAW,GAAD,mBAAKD,GAAL,CAAc,CAAEG,KAAIC,YAwBlC,OACE,uBAAKC,UAAU,MAAMC,MAAO,CAAEC,QAAS,SACrC,sBAAIL,QARe,WACrBH,EAAU,GACVF,EAAQL,GACRS,EAAW,MAKT,4BACA,uBAAKK,MAAO,CAAEC,QAAS,SACrB,gBAACC,EAAD,CAAUV,OAAQA,IAClB,sBAAII,QAvBa,WACrB,IAAMO,EAAOT,EAAQU,MACjBD,IACFb,EAAKa,EAAKN,IAAIM,EAAKL,IAAM,KACzBL,EAAqB,IAAXD,EAAe,EAAI,GAC7BD,EAAQD,GACRK,EAAWD,MAiBT,mBAC8B,IAAXF,EAAe,QAAU,UAG9C,uBACEQ,MAAO,CACLK,OAAQ,kBACRJ,QAAS,eACTK,YAAa,WAGdhB,EAAKH,KAAI,SAACC,EAAGmB,GAAJ,OACR,uBAAKC,IAAKD,EAAQP,MAAO,CAAEC,QAAS,SACjCb,EAAED,KAAI,SAACsB,EAAGC,GAAJ,OACL,uBACEF,IAAKE,EACLV,MAAO,CACLW,MAAO,OACPC,QAAS,oBACTC,MAAO,MACPC,OAAQ,MACRb,QAAS,QAEXL,QAASA,EAAQ,CAAEC,GAAIU,EAAQT,GAAIY,KAE5B,OAAND,GAAc,gBAACP,EAAD,CAAUV,OAAQiB,eAU3CP,EAAW,SAAC,GAAD,IAAGV,EAAH,EAAGA,OAAH,OACf,uBACEQ,MAAO,CACLK,OAAQ,kBACRU,aAAc,MACdD,OAAQ,MACRD,MAAO,MACPG,gBAAgB,GAAD,OAAgB,IAAXxB,EAAe,UAAY,SAC/Cc,YAAa,SACbW,UAAW","file":"static/js/6.660f4c4d.chunk.js","sourcesContent":["// import raw from 'raw.macro';\r\nimport * as React from 'react';\r\n\r\nimport {\r\n  Content,\r\n  // MarkdownContent\r\n} from '../../components/Content.view';\r\n\r\nexport default (props: any) => {\r\n  return (\r\n    <Content {...props}>\r\n      {/* <MarkdownContent path={raw('./README.md')} /> */}\r\n      <Gobang />\r\n    </Content>\r\n  );\r\n};\r\n\r\nconst Gobang = () => {\r\n  const len = 19;\r\n  const row = [...Array(len).fill(null)];\r\n  const metrix = row.map(x => [...row]);\r\n  const [data, setData] = React.useState<Array<Array<0 | 1 | null>>>(metrix);\r\n  const [runner, setRunner] = React.useState<0 | 1>(1);\r\n  const [history, setHistory] = React.useState<\r\n    Array<{ ri: number; ci: number }>\r\n  >([]);\r\n\r\n  /**\r\n   * One step play\r\n   */\r\n  const onClick = ({ ri, ci }: { ri: number; ci: number }) => () => {\r\n    if (data[ri][ci] === null) {\r\n      data[ri][ci] = runner;\r\n      setRunner(runner === 1 ? 0 : 1);\r\n      setData(data);\r\n      setHistory([...history, { ri, ci }]);\r\n    }\r\n  };\r\n  /**\r\n   * Reverse one step\r\n   */\r\n  const onClickReverse = () => {\r\n    const last = history.pop();\r\n    if (last) {\r\n      data[last.ri][last.ci] = null;\r\n      setRunner(runner === 1 ? 0 : 1);\r\n      setData(data);\r\n      setHistory(history);\r\n    }\r\n  };\r\n  /**\r\n   * Return to init status\r\n   */\r\n  const onClickRestart = () => {\r\n    setRunner(1);\r\n    setData(metrix);\r\n    setHistory([]);\r\n  };\r\n\r\n  return (\r\n    <div className='App' style={{ display: 'grid' }}>\r\n      <h1 onClick={onClickRestart}>Card Chess Pass - Gobang</h1>\r\n      <div style={{ display: 'grid' }}>\r\n        <ChessMan runner={runner} />\r\n        <h2 onClick={onClickReverse}>\r\n          Current runner: {runner === 1 ? 'black' : 'white'}\r\n        </h2>\r\n      </div>\r\n      <div\r\n        style={{\r\n          border: '1px solid black',\r\n          display: 'inline-block',\r\n          justifySelf: 'center',\r\n        }}\r\n      >\r\n        {data.map((x, rowIdx) => (\r\n          <div key={rowIdx} style={{ display: 'flex' }}>\r\n            {x.map((y, columnIdx) => (\r\n              <div\r\n                key={columnIdx}\r\n                style={{\r\n                  float: 'left',\r\n                  outline: '1px solid #BBBBBB',\r\n                  width: '3vw',\r\n                  height: '3vw',\r\n                  display: 'grid',\r\n                }}\r\n                onClick={onClick({ ri: rowIdx, ci: columnIdx })}\r\n              >\r\n                {y !== null && <ChessMan runner={y} />}\r\n              </div>\r\n            ))}\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst ChessMan = ({ runner }: { runner: 0 | 1 }) => (\r\n  <div\r\n    style={{\r\n      border: '1px solid black',\r\n      borderRadius: '2vw',\r\n      height: '2vw',\r\n      width: '2vw',\r\n      backgroundColor: `${runner === 1 ? '#333333' : 'white'}`,\r\n      justifySelf: 'center',\r\n      alignSelf: 'center',\r\n    }}\r\n  />\r\n);\r\n"],"sourceRoot":""}